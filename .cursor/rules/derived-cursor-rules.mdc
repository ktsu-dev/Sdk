---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## HEADERS

## TECH STACK

*   .NET SDK (version to be determined by global.json or project settings)
*   MSBuild
*   NuGet package manager
*   PowerShell 5.1 or newer
*   GitHub API (for fetching latest releases)

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

*   README.md: Provides a high-level overview of the project, setup instructions, and usage examples.
*   VERSION.md: Specifies the current version of the project.
*   CHANGELOG.md: Documents changes made in each version.
*   DESCRIPTION.md: Provides a detailed description of the project.
*   TAGS.md: Keywords for the project, used for NuGet packages and search.
*   Directory.Build.props: Contains common project properties.
*   Directory.Build.targets: Contains common project targets.
*   Sdk.props: Defines properties specific to the SDK.
*   Sdk.targets: Defines targets specific to the SDK.
*   AUTHORS.url: URL to authors' information
*   PROJECT.url: URL to project information

## CODING STANDARDS

## DEBUGGING

## TESTING

## WORKFLOW & RELEASE RULES

## .NET PROJECT STRUCTURE

1.  **Project Type Detection**: The SDK automatically detects different project types in your solution:

    *   **Primary Project**: The main project of your solution (YourSolution, YourSolution.Core)
    *   **CLI Project**: Command-line interface projects (YourSolution.CLI, YourSolutionCLI)
    *   **App Project**: Application projects (YourSolution.App, YourSolutionApp)
    *   **Test Project**: Test projects (YourSolution.Test, YourSolution.Tests)
2.  Each project type receives appropriate default settings and references.
3.  All projects get their properties from the Directory.Build files. For MSBuildSdk packages specifically, having at least a basic structure directly in the Sdk.csproj file is usually necessary for proper NuGet restore identification, even if other properties are inherited from Directory.Build.props.

## NUGET PACKAGE MANAGEMENT

1.  For MSBuildSdk packages specifically, having at least a basic structure directly in the Sdk.csproj file is usually necessary for proper NuGet restore identification, even if other properties are inherited from Directory.Build.props.

## POWERSHELL SCRIPTING RULES

1.  When writing PowerShell scripts, use the following standards:
2.  **Error Handling:** Always include comprehensive error handling to catch exceptions and provide informative messages.
3.  **Comments:** Add comments to explain the purpose and functionality of code blocks.
4.  **Parameters:** Use `[CmdletBinding()]` and `param()` blocks to define script parameters with appropriate validation and descriptions.
5.  **Functions:** Encapsulate reusable logic into functions for modularity and readability.
6.  **Output:** Provide clear and concise output messages to inform the user about the script's progress and results.
7.  **Idempotency:** Design scripts to be idempotent, meaning they can be run multiple times without causing unintended side effects.
8.  When creating scripts that modify files, include a `-WhatIf` parameter to allow users to preview changes before applying them.
9.  When using GitHub API, include these headers:

```PowerShell
$headers = @{
            "Accept" = "application/vnd.github.v3+json"
        }
```

10. Provide a README.md file that includes:
    *   All parameters and their usage
    *   Example commands for different scenarios
    *   How the script works
    *   System requirements